openapi: 3.0.3
info:
  title: Museum API
  description: API for managing museum exhibits, events, and operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@museumapi.example.com
servers:
  - url: https://api.museum.example.com/v1
    description: Production server
  - url: https://staging-api.museum.example.com/v1
    description: Staging server
tags:
  - name: Events
    description: Special events at the museum
  - name: Exhibits
    description: Museum exhibits and collections
  - name: Operations
    description: Museum operations and management
  - name: Tickets
    description: Ticket sales and reservations
paths:
  /special-events:
    get:
      summary: List special events
      description: Returns a list of all special events at the museum
      operationId: listSpecialEvents
      tags:
        - Events
      parameters:
        - name: limit
          in: query
          description: Maximum number of events to return
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of events to skip
          schema:
            type: integer
            default: 0
        - name: sort
          in: query
          description: Sort order
          schema:
            type: string
            enum: [date, -date, name, -name]
            default: date
      responses:
        '200':
          description: A list of special events
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialEvent'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      summary: Create special events
      description: Creates a new special event for the museum
      operationId: createSpecialEvent
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialEventInput'
      responses:
        '201':
          description: Special event created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /special-events/{eventId}:
    parameters:
      - name: eventId
        in: path
        required: true
        description: ID of the special event
        schema:
          type: string
    get:
      summary: Get special event
      description: Returns details of a specific special event
      operationId: getSpecialEvent
      tags:
        - Events
      responses:
        '200':
          description: Special event details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialEvent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update special event
      description: Updates an existing special event
      operationId: updateSpecialEvent
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialEventUpdate'
      responses:
        '200':
          description: Special event updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SpecialEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete special event
      description: Deletes a special event
      operationId: deleteSpecialEvent
      tags:
        - Events
      responses:
        '204':
          description: Special event deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /exhibits:
    get:
      summary: List exhibits
      description: Returns a list of all exhibits at the museum
      operationId: listExhibits
      tags:
        - Exhibits
      parameters:
        - name: limit
          in: query
          description: Maximum number of exhibits to return
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of exhibits to skip
          schema:
            type: integer
            default: 0
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
      responses:
        '200':
          description: A list of exhibits
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Exhibit'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /exhibits/{exhibitId}:
    parameters:
      - name: exhibitId
        in: path
        required: true
        description: ID of the exhibit
        schema:
          type: string
    get:
      summary: Get exhibit
      description: Returns details of a specific exhibit
      operationId: getExhibit
      tags:
        - Exhibits
      responses:
        '200':
          description: Exhibit details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Exhibit'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /tickets:
    get:
      summary: List tickets
      description: Returns a list of all tickets
      operationId: listTickets
      tags:
        - Tickets
      parameters:
        - name: limit
          in: query
          description: Maximum number of tickets to return
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of tickets to skip
          schema:
            type: integer
            default: 0
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [available, reserved, sold]
      responses:
        '200':
          description: A list of tickets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      summary: Create ticket
      description: Creates a new ticket
      operationId: createTicket
      tags:
        - Tickets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketInput'
      responses:
        '201':
          description: Ticket created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ticket'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    SpecialEvent:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the event
        name:
          type: string
          description: Name of the event
        location:
          type: string
          description: Location of the event
        eventDescription:
          type: string
          description: Description of the event
        dates:
          type: array
          items:
            type: string
            format: date
          description: Dates when the event takes place
        price:
          type: number
          description: Price of the event
        createdAt:
          type: string
          format: date-time
          description: When the event was created
        updatedAt:
          type: string
          format: date-time
          description: When the event was last updated
      required:
        - id
        - name
        - dates
    SpecialEventInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the event
        location:
          type: string
          description: Location of the event
        eventDescription:
          type: string
          description: Description of the event
        dates:
          type: array
          items:
            type: string
            format: date
          description: Dates when the event takes place
        price:
          type: number
          description: Price of the event
      required:
        - name
        - dates
    SpecialEventUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the event
        location:
          type: string
          description: Location of the event
        eventDescription:
          type: string
          description: Description of the event
        dates:
          type: array
          items:
            type: string
            format: date
          description: Dates when the event takes place
        price:
          type: number
          description: Price of the event
    Exhibit:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the exhibit
        name:
          type: string
          description: Name of the exhibit
        description:
          type: string
          description: Description of the exhibit
        category:
          type: string
          description: Category of the exhibit
        location:
          type: string
          description: Location of the exhibit in the museum
        startDate:
          type: string
          format: date
          description: When the exhibit starts
        endDate:
          type: string
          format: date
          description: When the exhibit ends
        images:
          type: array
          items:
            type: string
            format: uri
          description: Images of the exhibit
      required:
        - id
        - name
        - category
    Ticket:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the ticket
        type:
          type: string
          description: Type of ticket (adult, child, senior)
        price:
          type: number
          description: Price of the ticket
        date:
          type: string
          format: date
          description: Date the ticket is valid for
        status:
          type: string
          enum: [available, reserved, sold]
          description: Status of the ticket
        eventId:
          type: string
          description: ID of the event the ticket is for (if applicable)
      required:
        - id
        - type
        - price
        - date
        - status
    TicketInput:
      type: object
      properties:
        type:
          type: string
          description: Type of ticket (adult, child, senior)
        price:
          type: number
          description: Price of the ticket
        date:
          type: string
          format: date
          description: Date the ticket is valid for
        eventId:
          type: string
          description: ID of the event the ticket is for (if applicable)
      required:
        - type
        - price
        - date
    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        limit:
          type: integer
          description: Maximum number of items per page
        offset:
          type: integer
          description: Number of items skipped
        hasMore:
          type: boolean
          description: Whether there are more items
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: array
          items:
            type: string
          description: Additional error details
      required:
        - code
        - message
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: '#/components/schemas/Error'
security:
  - basicAuth: []
  - bearerAuth: []